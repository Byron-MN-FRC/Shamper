// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import com.revrobotics.CANSparkBase.IdleMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkFlex;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj2.command.SubsystemBase;

/**
 *
 */
public class Shamper extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax bottomLeft;
    private CANSparkMax bottomRight;
    private CANSparkFlex topLeft;
    private CANSparkFlex topRight;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private CANSparkMax bottomRightFollower;

    // sets default rpm for motors
    public double defaultRPM = 240;

    // this is the speed a motor should spin at full power
    private double maxRPMVortex = 6780;
    private double maxRPMNeo550 = 11000;

    // this should get the speed the shaft spins at full power
    private double bottomRightGearRatio = maxRPMNeo550 / 3;
    private double bottomLeftGearRatio = maxRPMNeo550 / 10;

    public double bottomRightTargetSpeed;
    public double bottomLeftTargetSpeed;
    public double topLeftTargetSpeed;
    public double topRightTargetSpeed;

    public Shamper() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        bottomLeft = new CANSparkMax(25, MotorType.kBrushless);

        bottomLeft.setInverted(true);
        bottomLeft.setIdleMode(IdleMode.kBrake);
        bottomLeft.burnFlash();

        bottomRight = new CANSparkMax(20, MotorType.kBrushless);

        bottomRight.setInverted(false);
        bottomRight.setIdleMode(IdleMode.kBrake);
        bottomRight.burnFlash();

        topLeft = new CANSparkFlex(27, MotorType.kBrushless);

        topLeft.setInverted(true);
        topLeft.setIdleMode(IdleMode.kBrake);
        topLeft.burnFlash();

        topRight = new CANSparkFlex(28, MotorType.kBrushless);

        topRight.setInverted(false);
        topRight.setIdleMode(IdleMode.kBrake);
        topRight.burnFlash();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        bottomRightFollower = new CANSparkMax(26, MotorType.kBrushless);

        bottomRightFollower.setInverted(true);
        bottomRightFollower.setIdleMode(IdleMode.kBrake);
        bottomRightFollower.burnFlash();
        
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void runAll() {
        bottomRightTargetSpeed = SmartDashboard.getNumber("BR-RPM", defaultRPM);
        bottomLeftTargetSpeed = SmartDashboard.getNumber("BL-RPM", defaultRPM);
        topRightTargetSpeed = SmartDashboard.getNumber("TR-RPM", defaultRPM);
        topLeftTargetSpeed = SmartDashboard.getNumber("TL-RPM", defaultRPM);

        bottomLeft.set(bottomLeftTargetSpeed / bottomLeftGearRatio);
        bottomRightFollower.set(bottomRightTargetSpeed / bottomRightGearRatio);
        bottomRight.set(bottomRightTargetSpeed / bottomRightGearRatio);
        topLeft.set(topLeftTargetSpeed / maxRPMVortex);
        topRight.set(topRightTargetSpeed / maxRPMVortex);
    }

    public void shoot() {
        topRightTargetSpeed = SmartDashboard.getNumber("TR-RPM", defaultRPM);
        topLeftTargetSpeed = SmartDashboard.getNumber("TL-RPM", defaultRPM);
        bottomLeft.set(1);
        bottomRightFollower.set(1);
        bottomRight.set(1);
        topLeft.set(topLeftTargetSpeed / maxRPMVortex);
        topRight.set(topRightTargetSpeed / maxRPMVortex);
    }

    public void stopall() {
        bottomLeft.set(0);
        bottomRightFollower.set(0);
        bottomRight.set(0);
        topLeft.set(0);
        topRight.set(0);
    }

}
