// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import com.revrobotics.CANSparkBase.IdleMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.revrobotics.CANSparkFlex;
import com.revrobotics.CANSparkLowLevel.MotorType;
import com.revrobotics.CANSparkMax;

import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

public class schanapper extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax maxOne;
private CANSparkMax maxTwo;
private CANSparkFlex flexOne;
private CANSparkFlex flexTwo;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public schanapper() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
maxOne = new CANSparkMax(25, MotorType.kBrushless);
 
 maxOne.restoreFactoryDefaults();  
maxOne.setInverted(false);
maxOne.setIdleMode(IdleMode.kCoast);
maxOne.burnFlash();
  

maxTwo = new CANSparkMax(26, MotorType.kBrushless);
 
 maxTwo.restoreFactoryDefaults();  
maxTwo.setInverted(false);
maxTwo.setIdleMode(IdleMode.kCoast);
maxTwo.burnFlash();
  

flexOne = new CANSparkFlex(27, MotorType.kBrushless);
 
 flexOne.restoreFactoryDefaults();  
flexOne.setInverted(false);
flexOne.setIdleMode(IdleMode.kCoast);
flexOne.burnFlash();
  

flexTwo = new CANSparkFlex(28, MotorType.kBrushless);
 
 flexTwo.restoreFactoryDefaults();  
flexTwo.setInverted(false);
flexTwo.setIdleMode(IdleMode.kCoast);
flexTwo.burnFlash();
  


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void spinall1() {
        maxOne.set(SmartDashboard.getNumber("Speed1", 0.1));
        maxTwo.set(SmartDashboard.getNumber("Speed1", 0.1));
        flexOne.set(SmartDashboard.getNumber("Speed2", 0.1));
        flexTwo.set(SmartDashboard.getNumber("Speed2", 0.1));
    }

    public void stopall1() {
        maxOne.set(0);
        maxTwo.set(0);
        flexOne.set(0);
        flexTwo.set(0);
    }

    public void spinall2() {
        maxOne.set(SmartDashboard.getNumber("Speed1", 0.1));
        maxTwo.set(SmartDashboard.getNumber("Speed1", 0.1));
        flexOne.set(SmartDashboard.getNumber("Speed2", 0.1));
    }

    public void stopall2() {
        maxOne.set(0);
        maxTwo.set(0);
        flexOne.set(0);
    }

}

